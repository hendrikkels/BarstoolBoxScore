import Head from 'next/head';
import {
  Card,
  Container,
  DepthButton,
  BasketballBoxScore,
  ScrollView,
  Text,
  VStack,
  BaseballBoxScore,
  HStack,
} from '@/components';
import useSWR from 'swr';
import fetcher from '@/utils/fetcher';
import { useMemo } from 'react';
import { Game } from '@prisma/client';
import { useRouter } from 'next/router';

export default function GameView() {
  const router = useRouter();

  const { uuid } = router.query;

  // const { data: gameData, error: gameError, isLoading: gameIsLoading } = useSWR('https://chumley.barstoolsports.com/dev/data/games/eed38457-db28-4658-ae4f-4d4d38e9e212.json', fetcher)
  const { data, error, isLoading } = useSWR(
    uuid ? `/api/game/${uuid}` : null,
    fetcher<Game | any>
  );

  const renderDatabaseDataBox = useMemo(() => {
    if (error) return <Text>{error}</Text>;
    if (isLoading) return <Text>{'Loading...'}</Text>;
    if (data && data.jsonData) {
      const {
        league,
        home_team,
        away_team,
        home_period_scores,
        away_period_scores,
        home_errors,
        away_errors,
        home_batter_totals,
        away_batter_totals,
        home_totals,
        away_totals,
      } = data.jsonData;
      return (
        <Card width={'100%'} maxWidth={'900px'} overflowX={'hidden'}>
          {league == 'MLB' ? (
            <BaseballBoxScore
              league={league}
              homeTeam={home_team.full_name}
              awayTeam={away_team.full_name}
              homeTeamAbbreviation={home_team.abbreviation}
              awayTeamAbbreviation={away_team.abbreviation}
              homeScores={home_period_scores}
              awayScores={away_period_scores}
              homeHighlights={{
                runs:
                  home_batter_totals?.runs != null
                    ? home_batter_totals.runs
                    : 'n/a',
                hits:
                  home_batter_totals?.hits != null
                    ? home_batter_totals.hits
                    : 'n/a',
                errors: home_errors != null ? home_errors : 'n/a',
              }}
              awayHighlights={{
                runs:
                  away_batter_totals?.runs != null
                    ? away_batter_totals.runs
                    : 'n/a',
                hits:
                  away_batter_totals?.hits != null
                    ? away_batter_totals.hits
                    : 'n/a',
                errors: away_errors != null ? away_errors : 'n/a',
              }}
              borderRadius={'6px'}
            />
          ) : (
            <BasketballBoxScore
              league={league}
              homeTeam={home_team.full_name}
              awayTeam={away_team.full_name}
              homeTeamAbbreviation={home_team.abbreviation}
              awayTeamAbbreviation={away_team.abbreviation}
              homeScores={home_period_scores}
              awayScores={away_period_scores}
              homeHighlights={{
                total: home_totals?.points
              }}
              awayHighlights={{
                total: away_totals?.points
              }}
              borderRadius={'6px'}
            />
          )}
        </Card>
      );
    }
  }, [data, error, isLoading]);

  // const renderDatabaseDataCard = useMemo(() => {
  //   return (
  //     <Card>
  //       <Text>{isLoading ? "loading..." : error ? JSON.stringify(error) : JSON.stringify(data, null, 2)}</Text>
  //     </Card>
  //   )
  // }, [data, error, isLoading])

  // const renderAPIDataCard = useMemo(() => {
  //   return (
  //     <Card>
  //       <Text>{JSON.stringify(gameData, null, 2)}</Text>
  //     </Card>
  //   )
  // }, [gameData])

  return (
    <>
      <Head>
        <title>BoxScore</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <ScrollView padding={'40px'} width={'100%'}>
            <VStack space={'40px'} alignItems={'center'} width={'100%'}>
              <Text fontSize={'4.5em'}>BoxScore</Text>
              {renderDatabaseDataBox}
              <HStack space={'20px'} flexWrap={'wrap'} justifyContent={'center'}>
                <DepthButton
                  label={'Back to Home Screen'}
                  onClick={() => {
                    router.push('/');
                  }}
                />
                <DepthButton
                  label={'View as Embeddable Component'}
                  backgroundColor={'secondary'}
                  onClick={() => {
                    router.push(`/box/${uuid}`);
                  }}
                />
              </HStack>

            </VStack>
          </ScrollView>
        </Container>
      </main>
    </>
  );
}
